name: Automated release
on:
  push:
    branches:
      - main
  release:
    types:
      - created
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Generate macOS app
    runs-on: macos-latest
    permissions:
      contents: write
      packages: write
      actions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 16
      - uses: irgaly/xcode-cache@v1
        with:
          key: xcode-cache-deriveddata-${{ github.workflow }}-${{ github.ref_name }}
          restore-keys: xcode-cache-deriveddata-${{ github.workflow }}-${{ github.ref_name }}
      - run: npm install --global create-dmg
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install Python dependencies
        run: pip install markdown
      - uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          p12-password: ${{ secrets.P12_PASSWORD }}
      # Only bump version for release events
      - name: Bump version
        if: github.event_name == 'release'
        uses: sirily11/ios-bump-version@master
        with:
          version: ${{ github.ref_name }}
          build-number: ${{github.run_number }}
      - name: Build
        run: |
          gem install xcpretty
          set -o pipefail && xcodebuild -destination platform=macOS \
            -scheme chessmate \
            -configuration Release \
            -archivePath output/output.xcarchive \
            -allowProvisioningUpdates \
            CODE_SIGN_IDENTITY="${{ secrets.SIGNING_CERTIFICATE_NAME }}" \
            CODE_SIGN_STYLE=Manual \
            OTHER_CODE_SIGN_FLAGS="--options=runtime --timestamp" \
            archive | xcpretty
      - name: Sign Sparkle
        run: ./scripts/sign-sparkle.sh
        env:
          SIGNING_CERTIFICATE_NAME: ${{ secrets.SIGNING_CERTIFICATE_NAME }}
      - name: Notarize
        run: ./scripts/notary.sh
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PWD: ${{ secrets.APPLE_ID_PWD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      - name: Generate appcast
        run: ./scripts/generate-appcast.sh
        env:
          SPARKLE_KEY: ${{ secrets.SPARKLE_KEY }}
          VERSION: ${{ github.ref_name }}
          BUILD_NUMBER: ${{ github.run_number }}
          RELEASE_NOTE: ${{ github.event.release.body }}
      # Upload artifact for Pull Requests (1 day retention)
      - name: Upload artifact for PR
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ChessMate-PR-${{ github.event.pull_request.number }}
          path: ChessMate.dmg
          retention-days: 1

      # Upload to release for release events
      - name: Upload DMG to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: ChessMate.dmg
          token: ${{ secrets.GITHUB_TOKEN }}

      # Upload appcast as an artifact for the deploy job
      - name: Upload appcast for deploy job
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: appcast-${{ github.sha }}
          path: appcast.xml
          retention-days: 1
      - name: Upload release notes for deploy job
        if: github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
          name: release_notes-${{ github.sha }}
          path: release_notes.html
          retention-days: 1

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download appcast from build job
        uses: actions/download-artifact@v4
        with:
          name: appcast-${{ github.sha }}
      - name: Download release notes from build job
        uses: actions/download-artifact@v4
        with:
          name: release_notes-${{ github.sha }}

      - name: Prepare pages directory
        run: |
          mkdir -p pages
          cp appcast.xml pages/
          cp release_notes.html pages/
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "pages"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
